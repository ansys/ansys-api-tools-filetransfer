// Copyright (C) 2022 - 2024 ANSYS, Inc. and/or its affiliates.
// SPDX-License-Identifier: MIT
//
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// syntax
syntax = "proto3";

// options
option optimize_for = SPEED;
option cc_enable_arenas = true;

// package
package ansys.api.tools.filetransfer.v1;

//
// The request data sent for querying the progress.
//
message ProgressRequest {

    // Flag whether to interrupt the operation or not.
    bool interrupt = 1;
}

//
// The response data returned for reporting the progress.
//
message ProgressResponse {

    // The integer value within [0, 100] indicating the current progress state.
    int32 state = 1;

}

//
// SHA-1
//
message SHA1 {

    // The SHA-1 hash value rendered as a hexadecimal number (40 digits long).
    string hex_digest = 1;
}

//
// The meta-data of a file.
//
message FileInfo {

    // The file name.
    string name = 1;

    // The total size of the file in bytes.
    // Note that we use signed integers everywhere even if negative values
    // are not allowed, because unsigned integers are not well-supported on
    // all languages (e.g. Java, JavaScript, OpenAPI). See the Google API
    // guide (https://cloud.google.com/apis/design/design_patterns#integer_types)
    // for reference.
    int64 size = 2;

    // The SHA-1 message digest (checksum) of the file.
    SHA1 sha1 = 3;
}

//
// The file content split into chunks.
//
message FileChunk {

    // The offset of this chunk.
    int64 offset = 1;

    // The data.
    bytes data = 2;
}

//
// The request data sent for a 'UploadFile' operation.
//
message UploadFileRequest {

    //
    // The request data sent for initializing a 'UploadFile' operation.
    //
    message Initialize {

        // The meta-data about the file.
        FileInfo file_info = 1;
    }

    //
    // The request data sent for sending a chunk of data for a 'UploadFile' operation.
    //
    message SendData {

        // The file data.
        FileChunk file_data = 1;
    }

    //
    // The request data sent for finalizing a 'UploadFile' operation.
    //
    message Finalize {
    }

    // The progress request.
    ProgressRequest progress = 1;

    // The sub-step of the 'UploadFile' operation to be executed.
    oneof sub_step {

        // Step 1 (once): Initializes the 'UploadFile' operation.
        Initialize initialize = 2;

        // Step 2 (#>1): Sends the file data (need to be called multiple times until all data are sent).
        SendData send_data = 3;

        // Step 3 (once): Finalizes the 'UploadFile' operation.
        Finalize finalize = 4;
    }
}

//
// The response data returned from a 'UploadFile' operation.
//
message UploadFileResponse {

    // The progress response
    ProgressResponse progress = 1;
}

//
// The request data sent for a 'DownloadFile' operation.
//
message DownloadFileRequest {

    //
    // The request data sent for initializing a 'DownloadFile' operation.
    //
    message Initialize {

        // The name of the file to be used.
        string filename = 1;

        // The chunk size to be used for receiving the file data.
        int32 chunk_size = 2;

        // Flag whether to compute the SHA-1 checksum of the file or not.
        bool compute_sha1_checksum = 3;
    }

    //
    // The request data sent for receiving a chunk of data for a 'DownloadFile' operation.
    //
    message ReceiveData {
    }

    //
    // The request data sent for finalizing a 'DownloadFile' operation.
    //
    message Finalize {
    }

    // The progress request.
    ProgressRequest progress = 1;

    // The sub-step of the 'DownloadFile' operation to be executed.
    oneof sub_step {

        // Step 1 (once): Initializes the 'DownloadFile' operation.
        Initialize initialize = 2;

        // Step 2 (once): Initiates the receiving of the file data.
        ReceiveData receive_data = 3;

        // Step 3 (once): Finalizes the 'DownloadFile' operation.
        Finalize finalize = 4;
    }
}

//
// The response data returned from a 'DownloadFile' operation.
//
message DownloadFileResponse {

    // The progress response
    ProgressResponse progress = 1;

    // The sub-response when returning the meta-data or the data back (1st the meta-data will be sent, then the data).
    oneof sub_step {

        // Step 1 (once): The meta-data about the file.
        FileInfo file_info = 2;

        // Step 2 (#>1): The file data.
        FileChunk file_data = 3;
    }
}

//
// File transfer service interfaces.
//
service FileTransferService {

    // Downloads a file from the server
    rpc DownloadFile(stream DownloadFileRequest) returns(stream DownloadFileResponse) {}

    // Uploads a file to the server
    rpc UploadFile(stream UploadFileRequest) returns(stream UploadFileResponse) {}
}
